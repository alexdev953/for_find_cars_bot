from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

PERSON_TYPE_DICT = {'P': '–§—ñ–∑–∏—á–Ω–∞ –æ—Å–æ–±–∞ üë®üèª‚Äçüíª',
                    'J': '–Æ—Ä–∏–¥–∏—á–Ω–∞ –æ—Å–æ–±–∞ üë®üèª‚Äç‚öñÔ∏è',
                    None: '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è'}

COLOR_CAR = {'–ß–ï–†–í–û–ù–ò–ô': 'üî¥',
             '–ß–û–†–ù–ò–ô': '‚ö´Ô∏è',
             '–°–Ü–†–ò–ô': '‚ö™Ô∏è',
             '–ë–Ü–õ–ò–ô': '‚ö™Ô∏è',
             '–°–ò–ù–Ü–ô': 'üîµ',
             '–ë–ï–ñ–ï–í–ò–ô': 'üèª',
             '–ó–ï–õ–ï–ù–ò–ô': 'üü¢',
             '–ñ–û–í–¢–ò–ô': 'üü°',
             '–§–Ü–û–õ–ï–¢–û–í–ò–ô': 'üü£',
             '–ö–û–†–ò–ß–ù–ï–í–ò–ô': 'üü§',
             '–û–†–ê–ù–ñ–ï–í–ò–ô': 'üü†',
             '–ù–ï–í–ò–ó–ù–ê–ß–ï–ù–ò–ô': '',
             None: ''
             }


class FormatMessage:

    @staticmethod
    def message_ans(data: dict) -> str:
        """
        –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ –æ—Ç—Ä–∏–º–∞–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.
        :param data: –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è —Ä–æ–∑–±–æ—Ä—É.
        :return: –°—Ñ–æ—Ä–º–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç.
        """
        number_plate = data.get('number_plate', '–ü—É—Å—Ç–æ')
        operation = data.get('operation', '–ü—É—Å—Ç–æ')
        date_operation = data.get('date_operation', '–ü—É—Å—Ç–æ')
        dep_name = data.get('dep_name', '–ü—É—Å—Ç–æ')
        person_type = data.get('person_type', None)
        addres_person = data.get('addres_person', '–ü—É—Å—Ç–æ')
        vin_code = data.get('vin_code', '–ü—É—Å—Ç–æ')
        brand = data.get('brand', '–ü—É—Å—Ç–æ')
        model = data.get('model', '–ü—É—Å—Ç–æ')
        year = data.get('year', '–ü—É—Å—Ç–æ')
        fuel = data.get('fuel', '–ü—É—Å—Ç–æ')
        color = data.get('color')
        kind = data.get('kind', '–ü—É—Å—Ç–æ')
        body = data.get('body', '–ü—É—Å—Ç–æ')
        purpose = data.get('purpose', '–ü—É—Å—Ç–æ')
        capacity = data.get('capacity', 0)
        weight = data.get('weight', '–ü—É—Å—Ç–æ')
        total_weight = data.get('total_weight', '–ü—É—Å—Ç–æ')
        message = f'<b>–ù–æ–º–µ—Ä –∞–≤—Ç–æ: </b>{number_plate}\n<b>–û–ø–µ—Ä–∞—Ü—ñ—è: </b>{operation}\n' \
                  f'<b>–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó: </b>{date_operation}\n' \
                  f'<b>–°–µ—Ä–≤—ñ—Å–Ω–∏–π —Ü–µ–Ω—Ç—Ä: </b>{dep_name}\n<b>–¢–∏–ø –æ—Å–æ–±–∏: </b>{PERSON_TYPE_DICT[person_type]}\n' \
                  f'<b>–ê–¥—Ä–µ—Å–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –æ—Å–æ–±–∏: </b>{addres_person}\n' \
                  f'<b>VIN:</b> {vin_code}\n<b>–ù–∞–∑–≤–∞ –∞–≤—Ç–æ: </b>{brand}\n<b>–ú–æ–¥–µ–ª—å:</b> {model}\n' \
                  f'<b>–†—ñ–∫ –≤–∏–ø—É—Å–∫—É: </b>{year}\n<b>–ü–∞–ª–∏–≤–æ: </b>{fuel}\n' \
                  f'<b>–ö–æ–ª—ñ—Ä:</b> {color} {COLOR_CAR.get(color)}\n<b>–¢–∏–ø –∞–≤—Ç–æ:</b> {kind}\n<b>–ö—É–∑–æ–≤:</b> {body}\n' \
                  f'<b>–ü—Ä–∏–∑–Ω–∞—á–µ–Ω—è: </b>{purpose}\n<b>–û–±\'—î–º –¥–≤–∏–≥—É–Ω–∞: </b>{capacity}\n' \
                  f'<b>–í–∞–≥–∞:</b> {weight}–∫–≥.\n<b>–ü–æ–≤–Ω–∞ –≤–∞–≥–∞:</b> {total_weight}–∫–≥.'
        return message

    def format_msg_lp(self, data: list, number_lp: str):
        """
        Get list with info and iterate for beauty msg answer
        :param data: list with info
        :type data: list
        :param number_lp: numberplate
        :type number_lp: str
        :return: answer
        :rtype: Union
        """
        if data:
            answer_list = []
            for val in data:
                vin_keyboard = InlineKeyboardMarkup(row_width=1)
                message = self.message_ans(val)
                vin_code_id = val.get('vin_code_id', '–ü—É—Å—Ç–æ')
                if vin_code_id != '1':
                    vin_keyboard.add(InlineKeyboardButton('–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ VIN', callback_data=f"v@{vin_code_id}"))
                answer_list.append((message, vin_keyboard))
            return answer_list
        else:
            answer = f'–ü–æ –Ω–æ–º–µ—Ä—É {number_lp}, –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
            return answer

    def format_msg_vin(self, data: list):
        if data:
            answer_list = []
            for val in data:
                message = self.message_ans(val)
                answer_list.append(message)
            return answer_list
        else:
            answer = f'–ü–æ VIN –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
            return [answer]
